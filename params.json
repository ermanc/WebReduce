{"name":"WebReduce","tagline":"Powerfully simple map/reduce network, powered by browsers of everyday users","body":"### Why WebReduce?\r\nBecause everyday millions of people are just doing lightweight browsing on their laptops, desktops or smartphones that are as powerful as some supercomputers of previous decades.\r\n\r\nIf we could tap into the potential of this enormous computing power, we might be able to use it to solve highly distributed but expensive to compute problems in a cheap and efficient way.\r\n\r\n### What is it?\r\nSimilar to other distributed computing projects such as [SETI@home](https://en.wikipedia.org/wiki/SETI@home) or [Folding@home](https://en.wikipedia.org/wiki/Folding@home), WebReduce aims to leverage compute resources of participating users to solve problems. Differently than aforementioned projects:\r\n\r\n- WebReduce is a generic map/reduce platform limited only by what you can have it compute\r\n- WebReduce does not require any installations of special programs\r\n\r\nBy running directly in the browser, the barrier to entry from participator's perspective by is lowered significantly. No signups, no downloads, no interactions of any kind required from the participator except for the explicit acknowledgement of participation into WebReduce.\r\n\r\n### How does it work?\r\nIt's similar in concept to Amazon's EMR where you can define your input, mappers and reducers but instead of picking instances to run your EMR jobs on, you will just let the system choose execution nodes and collect the results.\r\n\r\nBy using technologies like WebPack, you can develop native-like mappers and reducers, with custom dependencies and requirements, that can just run on the given input on any given browser supporting vanilla JS. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}